#!/usr/bin/env python3
"""
Script consolidado para migrar o banco de dados DIRIA
Inclui todas as migra√ß√µes necess√°rias para o sistema
"""

import sqlite3
import os
import sys
from datetime import datetime, timezone

# Adicionar o diret√≥rio atual ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def migrate_database():
    """Migra o banco de dados para incluir todas as novas funcionalidades"""
    
    db_path = 'instance/diria.db'
    
    if not os.path.exists(db_path):
        print("Banco de dados n√£o encontrado. Execute a aplica√ß√£o primeiro para criar o banco.")
        return
    
    print("üîÑ Iniciando migra√ß√£o consolidada do banco de dados DIRIA...")
    
    try:
        # Conectar ao banco
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # ========================================
        # 1. MIGRA√á√ÉO DE TOKENS (existente)
        # ========================================
        print("\nüìä 1. Migrando colunas de tokens...")
        
        cursor.execute("PRAGMA table_info(usage_log)")
        columns = [column[1] for column in cursor.fetchall()]
        
        # Adicionar novas colunas se n√£o existirem
        new_columns = [
            ('request_tokens', 'INTEGER DEFAULT 0'),
            ('response_tokens', 'INTEGER DEFAULT 0'),
            ('model_used', 'VARCHAR(50)'),
            ('success', 'BOOLEAN DEFAULT 1'),
            ('error_message', 'TEXT')
        ]
        
        for column_name, column_type in new_columns:
            if column_name not in columns:
                print(f"  ‚ûï Adicionando coluna: {column_name}")
                cursor.execute(f"ALTER TABLE usage_log ADD COLUMN {column_name} {column_type}")
            else:
                print(f"  ‚úÖ Coluna {column_name} j√° existe")
        
        # Atualizar registros existentes
        cursor.execute("UPDATE usage_log SET success = 1 WHERE success IS NULL")
        cursor.execute("UPDATE usage_log SET request_tokens = tokens_used WHERE request_tokens IS NULL AND tokens_used > 0")
        
        # ========================================
        # 2. MIGRA√á√ÉO DE INSTRU√á√ïES
        # ========================================
        print("\nüìù 2. Migrando instru√ß√µes dos modelos...")
        
        # Verificar se a tabela model_instructions existe
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='model_instructions'")
        if not cursor.fetchone():
            print("  ‚ûï Criando tabela model_instructions...")
            cursor.execute("""
                CREATE TABLE model_instructions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    model_id VARCHAR(100) UNIQUE NOT NULL,
                    instructions TEXT NOT NULL,
                    is_active BOOLEAN DEFAULT 1,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            """)
        else:
            print("  ‚úÖ Tabela model_instructions j√° existe")
        
        # Verificar se a tabela general_instructions existe
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='general_instructions'")
        if not cursor.fetchone():
            print("  ‚ûï Criando tabela general_instructions...")
            cursor.execute("""
                CREATE TABLE general_instructions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    instructions TEXT NOT NULL,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # Inserir instru√ß√µes padr√£o
            default_instructions = """Voc√™ √© um juiz experiente especializado em direito civil, com mais de 20 anos de experi√™ncia no Poder Judici√°rio. 

Suas decis√µes devem ser baseadas apenas nos fatos apresentados e na legisla√ß√£o aplic√°vel. Use linguagem formal e t√©cnica apropriada para documentos judiciais.

N√£o mencione nomes de pessoas f√≠sicas ou jur√≠dicas espec√≠ficas. N√£o fa√ßa suposi√ß√µes sobre fatos n√£o apresentados. Base suas decis√µes apenas nos dados fornecidos e na legisla√ß√£o aplic√°vel."""
            
            cursor.execute("INSERT INTO general_instructions (instructions) VALUES (?)", (default_instructions,))
            print("  ‚úÖ Instru√ß√µes gerais padr√£o inseridas")
        else:
            print("  ‚úÖ Tabela general_instructions j√° existe")
        
        # ========================================
        # 3. MIGRA√á√ÉO DE CHAVES DE API
        # ========================================
        print("\nüîë 3. Migrando chaves de API...")
        
        # Verificar se a tabela api_key existe
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='api_key'")
        if not cursor.fetchone():
            print("  ‚ûï Criando tabela api_key...")
            cursor.execute("""
                CREATE TABLE api_key (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    provider VARCHAR(50) UNIQUE NOT NULL,
                    api_key TEXT NOT NULL,
                    is_active BOOLEAN DEFAULT 1,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            """)
        else:
            print("  ‚úÖ Tabela api_key j√° existe")
        
        # ========================================
        # 4. MIGRA√á√ÉO DE TAXA DE C√ÇMBIO
        # ========================================
        print("\nüí± 4. Migrando taxa de c√¢mbio...")
        
        # Verificar se a tabela dollar_rate existe
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='dollar_rate'")
        if not cursor.fetchone():
            print("  ‚ûï Criando tabela dollar_rate...")
            cursor.execute("""
                CREATE TABLE dollar_rate (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    rate FLOAT NOT NULL,
                    date DATE NOT NULL,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            """)
        else:
            print("  ‚úÖ Tabela dollar_rate j√° existe")
        
        # ========================================
        # 5. MIGRA√á√ÉO DE STATUS DOS MODELOS
        # ========================================
        print("\nü§ñ 5. Migrando status dos modelos...")
        
        # Verificar se a tabela model_status existe
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='model_status'")
        if not cursor.fetchone():
            print("  ‚ûï Criando tabela model_status...")
            cursor.execute("""
                CREATE TABLE model_status (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    model_id VARCHAR(100) UNIQUE NOT NULL,
                    is_enabled BOOLEAN DEFAULT 1,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # Inserir status padr√£o para todos os modelos
            try:
                from models_config import get_all_models
                all_models = get_all_models()
                
                for model_id in all_models:
                    cursor.execute("INSERT INTO model_status (model_id, is_enabled) VALUES (?, ?)", (model_id, True))
                    print(f"  ‚úÖ Status criado para modelo: {model_id}")
                
                print(f"  üìä Total de {len(all_models)} modelos configurados")
            except ImportError:
                print("  ‚ö†Ô∏è  N√£o foi poss√≠vel importar models_config - status dos modelos n√£o criado")
        else:
            print("  ‚úÖ Tabela model_status j√° existe")
            
            # Verificar se h√° modelos sem status
            try:
                from models_config import get_all_models
                all_models = get_all_models()
                
                for model_id in all_models:
                    cursor.execute("SELECT id FROM model_status WHERE model_id = ?", (model_id,))
                    if not cursor.fetchone():
                        cursor.execute("INSERT INTO model_status (model_id, is_enabled) VALUES (?, ?)", (model_id, True))
                        print(f"  ‚ûï Status criado para modelo: {model_id}")
            except ImportError:
                print("  ‚ö†Ô∏è  N√£o foi poss√≠vel verificar modelos faltantes")
        
        # ========================================
        # 6. MIGRA√á√ÉO DE CONFIGURA√á√ïES DA APLICA√á√ÉO
        # ========================================
        print("\n‚öôÔ∏è 6. Migrando configura√ß√µes da aplica√ß√£o...")
        
        # Verificar se a tabela app_config existe
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='app_config'")
        if not cursor.fetchone():
            print("  ‚ûï Criando tabela app_config...")
            cursor.execute("""
                CREATE TABLE app_config (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    key VARCHAR(100) UNIQUE NOT NULL,
                    value TEXT NOT NULL,
                    description TEXT,
                    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # Inserir configura√ß√µes padr√£o
            default_configs = [
                ('default_ai_model', 'gemini-2.5-pro', 'Modelo de IA padr√£o da aplica√ß√£o')
            ]
            
            for key, value, description in default_configs:
                cursor.execute("INSERT INTO app_config (key, value, description) VALUES (?, ?, ?)", (key, value, description))
                print(f"  ‚úÖ Configura√ß√£o criada: {key}")
        else:
            print("  ‚úÖ Tabela app_config j√° existe")
        
        # Commit de todas as mudan√ßas
        conn.commit()
        print("\n‚úÖ Migra√ß√£o consolidada conclu√≠da com sucesso!")
        
        # ========================================
        # 7. ESTAT√çSTICAS FINAIS
        # ========================================
        print("\nüìä Estat√≠sticas finais:")
        
        # Contar logs
        cursor.execute("SELECT COUNT(*) FROM usage_log")
        total_logs = cursor.fetchone()[0]
        print(f"  üìã Total de logs: {total_logs}")
        
        # Contar tokens
        cursor.execute("SELECT SUM(tokens_used) FROM usage_log WHERE tokens_used > 0")
        total_tokens = cursor.fetchone()[0] or 0
        print(f"  üßÆ Total de tokens utilizados: {total_tokens}")
        
        # Contar modelos configurados
        cursor.execute("SELECT COUNT(*) FROM model_status")
        total_models = cursor.fetchone()[0]
        print(f"  ü§ñ Modelos configurados: {total_models}")
        
        # Contar chaves de API
        cursor.execute("SELECT COUNT(*) FROM api_key")
        total_keys = cursor.fetchone()[0]
        print(f"  üîë Chaves de API configuradas: {total_keys}")
        
        # Contar prompts
        cursor.execute("SELECT COUNT(*) FROM prompt")
        total_prompts = cursor.fetchone()[0]
        print(f"  üìù Prompts configurados: {total_prompts}")
        
        # Contar usu√°rios
        cursor.execute("SELECT COUNT(*) FROM user")
        total_users = cursor.fetchone()[0]
        print(f"  üë• Usu√°rios cadastrados: {total_users}")
        
    except Exception as e:
        print(f"‚ùå Erro durante a migra√ß√£o: {e}")
        conn.rollback()
        raise
    finally:
        conn.close()

def show_migration_status():
    """Mostra o status atual das migra√ß√µes"""
    db_path = 'instance/diria.db'
    
    if not os.path.exists(db_path):
        print("‚ùå Banco de dados n√£o encontrado")
        return
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("üìã Status das migra√ß√µes:")
        print("-" * 50)
        
        # Verificar tabelas
        tables = [
            'usage_log', 'user', 'prompt', 'model_instructions', 
            'general_instructions', 'api_key', 'dollar_rate', 
            'model_status', 'app_config'
        ]
        
        for table in tables:
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?", (table,))
            if cursor.fetchone():
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                print(f"‚úÖ {table}: {count} registros")
            else:
                print(f"‚ùå {table}: n√£o existe")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar status: {e}")

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "status":
        show_migration_status()
    else:
        migrate_database() 