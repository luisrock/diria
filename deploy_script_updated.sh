#!/bin/bash

# DIRIA - Script de Deploy Otimizado para Quick Deploy
# Repo: https://github.com/luisrock/diria
# Site: diria.com.br
# Python: 3.11.13

echo "üöÄ Iniciando deploy autom√°tico do DIRIA..."

# Definir vari√°veis
SITE_DIR="/home/forge/diria.com.br"
PYTHON_VERSION="python3.11"
REPO_URL="https://github.com/luisrock/diria.git"

# Ir para o diret√≥rio do site
cd "$SITE_DIR"

# Verificar se √© a primeira vez (se n√£o existe .git)
if [ ! -d ".git" ]; then
    echo "üì• Primeira execu√ß√£o - clonando reposit√≥rio..."
    git clone "$REPO_URL" .
else
    echo "üîÑ Atualizando c√≥digo do GitHub..."
    git fetch origin
    git reset --hard origin/main
fi

echo "‚úÖ C√≥digo atualizado com sucesso"

# Preservar arquivos de configura√ß√£o existentes
echo "üìÅ Preservando configura√ß√µes..."

# Backup do .env se existir (mantido para fallback)
if [ -f ".env" ]; then
    echo "üíæ Backup do .env preservado"
else
    echo "üìù Criando .env padr√£o..."
    cat > .env << 'EOF'
# DIRIA - Configura√ß√µes do Sistema
FLASK_SECRET_KEY=your-secret-key-here
DATABASE_URL=sqlite:///diria.db

# Configura√ß√µes OpenAI (fallback - preferencialmente use o painel admin)
OPENAI_API_KEY=your-openai-key-here

# Configura√ß√µes Anthropic (fallback - preferencialmente use o painel admin)
ANTHROPIC_API_KEY=your-anthropic-key-here

# Configura√ß√µes Google (fallback - preferencialmente use o painel admin)
GOOGLE_API_KEY=your-google-key-here

# Configura√ß√µes do Sistema
DEBUG=False
HOST=0.0.0.0
PORT=8000
EOF
    echo "‚ö†Ô∏è  IMPORTANTE: Configure as chaves de API via painel administrativo!"
fi

# Criar/atualizar gunicorn.conf.py
echo "‚öôÔ∏è Configurando Gunicorn..."
cat > gunicorn.conf.py << 'EOF'
# Gunicorn configuration for DIRIA
bind = "127.0.0.1:8000"
workers = 2
worker_class = "sync"
worker_connections = 1000
timeout = 300
keepalive = 2
max_requests = 1000
max_requests_jitter = 100
preload_app = True

# Logs
accesslog = "/home/forge/diria.com.br/logs/access.log"
errorlog = "/home/forge/diria.com.br/logs/error.log"
loglevel = "info"
EOF

# Configurar ambiente Python
echo "üêç Configurando ambiente Python..."
if [ ! -d "venv" ]; then
    echo "üì¶ Criando ambiente virtual..."
    $PYTHON_VERSION -m venv venv
fi

source venv/bin/activate

# Atualizar pip
echo "üì¶ Atualizando pip..."
python -m pip install --upgrade pip

# Instalar/atualizar depend√™ncias
echo "üì¶ Instalando depend√™ncias..."
pip install -r requirements.txt

# Criar diret√≥rio de logs
echo "üìÅ Criando diret√≥rio de logs..."
mkdir -p logs

# Configurar banco de dados
echo "üóÑÔ∏è Configurando banco de dados..."

# Verificar se o banco existe
if [ ! -f "instance/diria.db" ]; then
    echo "üÜï Banco de dados n√£o encontrado - criando do zero..."
    
    # Criar todas as tabelas
    echo "üìã Criando estrutura do banco..."
    python -c "from app import app, db; app.app_context().push(); db.create_all(); print('‚úÖ Tabelas criadas com sucesso!')"
    
    # Inicializar com dados padr√£o
    echo "üìù Inicializando com dados padr√£o..."
    python -c "from app import init_db; init_db(); print('‚úÖ Dados padr√£o criados!')"
    
    # Executar migra√ß√£o consolidada
    echo "üîÑ Executando migra√ß√£o consolidada..."
    python migrate_db.py
    
    # Migrar modelos hardcoded para o banco de dados (sempre na primeira execu√ß√£o)
    echo "ü§ñ Migrando modelos de IA para o banco de dados..."
    python migrate_models_to_db.py
    
    # Limpar tabelas desnecess√°rias (sempre na primeira execu√ß√£o)
    echo "üßπ Limpando tabelas desnecess√°rias..."
    python cleanup_db.py
    
    echo "‚úÖ Banco de dados inicializado completamente!"
else
    echo "üîÑ Banco existente - executando backup e migra√ß√£o..."
    
    # CRIAR BACKUP AUTOM√ÅTICO DO BANCO
    echo "üíæ Criando backup do banco de dados..."
    BACKUP_DIR="backups"
    mkdir -p "$BACKUP_DIR"
    
    # Nome do backup com timestamp
    TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
    BACKUP_FILE="$BACKUP_DIR/diria_backup_${TIMESTAMP}.db"
    
    # Copiar banco de dados
    cp "instance/diria.db" "$BACKUP_FILE"
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Backup criado: $BACKUP_FILE"
        
        # SISTEMA INTELIGENTE DE LIMPEZA DE BACKUPS
        echo "üßπ Gerenciando backups antigos..."
        
        # Configura√ß√µes de reten√ß√£o
        MAX_BACKUPS=5          # M√°ximo de backups por tipo
        MAX_DAILY_BACKUPS=7    # M√°ximo de backups di√°rios
        MAX_SIZE_MB=100        # Tamanho m√°ximo total em MB
        
        # Fun√ß√£o para calcular tamanho total dos backups
        calculate_backup_size() {
            local total_size=0
            for backup in "$BACKUP_DIR"/diria_backup_*.db; do
                if [ -f "$backup" ]; then
                    local size=$(stat -c%s "$backup" 2>/dev/null || stat -f%z "$backup" 2>/dev/null || echo 0)
                    total_size=$((total_size + size))
                fi
            done
            echo $((total_size / 1024 / 1024))  # Converter para MB
        }
        
        # 1. Limpeza por quantidade (manter apenas os √∫ltimos N)
        echo "  üìä Limpeza por quantidade (mantendo √∫ltimos $MAX_BACKUPS)..."
        backup_count=$(ls -1 "$BACKUP_DIR"/diria_backup_*.db 2>/dev/null | wc -l)
        if [ "$backup_count" -gt "$MAX_BACKUPS" ]; then
            to_remove=$((backup_count - MAX_BACKUPS))
            ls -t "$BACKUP_DIR"/diria_backup_*.db 2>/dev/null | tail -n "$to_remove" | xargs -r rm
            echo "    ‚úÖ Removidos $to_remove backup(s) antigo(s)"
        else
            echo "    ‚ÑπÔ∏è  Quantidade dentro do limite ($backup_count/$MAX_BACKUPS)"
        fi
        
        # 2. Limpeza por data (manter apenas backups dos √∫ltimos N dias)
        echo "  üìÖ Limpeza por data (mantendo √∫ltimos $MAX_DAILY_BACKUPS dias)..."
        cutoff_date=$(date -d "$MAX_DAILY_BACKUPS days ago" +"%Y%m%d" 2>/dev/null || date -v-${MAX_DAILY_BACKUPS}d +"%Y%m%d" 2>/dev/null || echo "00000000")
        
        for backup in "$BACKUP_DIR"/diria_backup_*.db; do
            if [ -f "$backup" ]; then
                backup_date=$(echo "$backup" | grep -o '[0-9]\{8\}' | head -1)
                if [ "$backup_date" != "" ] && [ "$backup_date" -lt "$cutoff_date" ]; then
                    rm "$backup"
                    echo "    üóëÔ∏è  Removido backup antigo: $(basename "$backup")"
                fi
            fi
        done
        
        # 3. Limpeza por tamanho (se exceder limite)
        echo "  üíæ Verificando tamanho total dos backups..."
        total_size=$(calculate_backup_size)
        if [ "$total_size" -gt "$MAX_SIZE_MB" ]; then
            echo "    ‚ö†Ô∏è  Tamanho total: ${total_size}MB (limite: ${MAX_SIZE_MB}MB)"
            echo "    üóëÔ∏è  Removendo backups mais antigos at√© atingir o limite..."
            
            while [ "$total_size" -gt "$MAX_SIZE_MB" ] && [ "$(ls -1 "$BACKUP_DIR"/diria_backup_*.db 2>/dev/null | wc -l)" -gt 1 ]; do
                oldest_backup=$(ls -t "$BACKUP_DIR"/diria_backup_*.db 2>/dev/null | tail -1)
                if [ -f "$oldest_backup" ]; then
                    backup_size=$(stat -c%s "$oldest_backup" 2>/dev/null || stat -f%z "$oldest_backup" 2>/dev/null || echo 0)
                    backup_size_mb=$((backup_size / 1024 / 1024))
                    rm "$oldest_backup"
                    total_size=$((total_size - backup_size_mb))
                    echo "      üóëÔ∏è  Removido: $(basename "$oldest_backup") (${backup_size_mb}MB)"
                else
                    break
                fi
            done
        else
            echo "    ‚úÖ Tamanho total: ${total_size}MB (dentro do limite de ${MAX_SIZE_MB}MB)"
        fi
        
        # 4. Relat√≥rio final
        final_count=$(ls -1 "$BACKUP_DIR"/diria_backup_*.db 2>/dev/null | wc -l)
        final_size=$(calculate_backup_size)
        echo "  üìã Relat√≥rio final: $final_count backup(s), ${final_size}MB total"
        echo "‚úÖ Gerenciamento de backups conclu√≠do"
    else
        echo "‚ùå ERRO: Falha ao criar backup do banco de dados!"
        echo "‚ö†Ô∏è  ABORTANDO DEPLOY por seguran√ßa!"
        exit 1
    fi
    
    # Executar migra√ß√£o consolidada (inclui todas as migra√ß√µes necess√°rias)
    echo "üîÑ Executando migra√ß√£o consolidada..."
    python migrate_db.py
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Migra√ß√£o consolidada conclu√≠da!"
        
        # Verificar se os modelos j√° foram migrados
        echo "üîç Verificando se modelos j√° foram migrados..."
        python -c "
try:
    from app import app, AIModel
    app.app_context().push()
    models = AIModel.query.all()
    print(f'Encontrados {len(models)} modelos no banco')
    if len(models) > 0:
        print('‚úÖ Modelos encontrados - migra√ß√£o n√£o necess√°ria')
        exit(0)
    else:
        print('‚ö†Ô∏è  Nenhum modelo encontrado - migra√ß√£o necess√°ria')
        exit(1)
except Exception as e:
    print(f'‚ùå Erro ao verificar modelos: {e}')
    exit(1)
"
        
        MODEL_CHECK_RESULT=$?
        echo "üîç Resultado da verifica√ß√£o: $MODEL_CHECK_RESULT"
        
        if [ $MODEL_CHECK_RESULT -ne 0 ]; then
            # Migrar modelos hardcoded para o banco de dados (apenas se n√£o existirem)
            echo "ü§ñ Migrando modelos de IA para o banco de dados..."
            echo "üîç Executando: python migrate_models_to_db.py"
            
            # Executar migra√ß√£o com captura de erro detalhada
            python migrate_models_to_db.py 2>&1
            MIGRATION_RESULT=$?
            echo "üîç Resultado da migra√ß√£o: $MIGRATION_RESULT"
            
            if [ $MIGRATION_RESULT -eq 0 ]; then
                echo "‚úÖ Modelos migrados com sucesso!"
                
                # Verificar novamente ap√≥s migra√ß√£o
                echo "üîç Verificando modelos ap√≥s migra√ß√£o..."
                python -c "
try:
    from app import app, AIModel
    app.app_context().push()
    models = AIModel.query.all()
    print(f'‚úÖ {len(models)} modelos encontrados ap√≥s migra√ß√£o')
    enabled_models = [m for m in models if m.is_enabled]
    print(f'‚úÖ {len(enabled_models)} modelos habilitados')
except Exception as e:
    print(f'‚ùå Erro ao verificar modelos ap√≥s migra√ß√£o: {e}')
    import traceback
    traceback.print_exc()
"
            else
                echo "‚ùå ERRO: Falha na migra√ß√£o de modelos!"
                echo "üîç Verificando se a tabela ai_model existe..."
                python -c "
try:
    import sqlite3
    conn = sqlite3.connect('instance/diria.db')
    cursor = conn.cursor()
    cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table' AND name='ai_model'\")
    result = cursor.fetchone()
    conn.close()
    if result:
        print('‚úÖ Tabela ai_model existe')
    else:
        print('‚ùå Tabela ai_model n√£o existe!')
except Exception as e:
    print(f'‚ùå Erro ao verificar tabela: {e}')
"
                echo "üîÑ Restaurando backup..."
                cp "$BACKUP_FILE" "instance/diria.db"
                echo "‚úÖ Backup restaurado. Verifique os logs e tente novamente."
                exit 1
            fi
        else
            echo "‚ÑπÔ∏è  Modelos j√° migrados - pulando migra√ß√£o"
        fi
        
        # Verificar se a tabela model_status ainda existe
        echo "üîç Verificando se limpeza j√° foi executada..."
        python -c "
try:
    import sqlite3
    conn = sqlite3.connect('instance/diria.db')
    cursor = conn.cursor()
    cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table' AND name='model_status'\")
    result = cursor.fetchone()
    conn.close()
    print(f'Tabela model_status: {\"existe\" if result else \"n√£o existe\"}')
    exit(0 if result else 1)
except Exception as e:
    print(f'Erro ao verificar tabela model_status: {e}')
    exit(1)
" 2>/dev/null
        
        if [ $? -eq 0 ]; then
            # Limpar tabelas desnecess√°rias (apenas se ainda existirem)
            echo "üßπ Limpando tabelas desnecess√°rias..."
            python cleanup_db.py
            
            if [ $? -eq 0 ]; then
                echo "‚úÖ Limpeza do banco conclu√≠da!"
            else
                echo "‚ö†Ô∏è  Aviso: Falha na limpeza do banco (sistema continuar√° funcionando)"
            fi
        else
            echo "‚ÑπÔ∏è  Limpeza j√° executada - pulando limpeza"
        fi
        
        # Verificar integridade do banco ap√≥s migra√ß√£o
        echo "üîç Verificando integridade do banco de dados..."
        python verify_db_integrity.py
        
        if [ $? -eq 0 ]; then
            echo "‚úÖ Integridade do banco verificada com sucesso!"
            
            # Verificar se os modelos est√£o funcionando corretamente
            echo "ü§ñ Verificando modelos de IA..."
            python -c "
try:
    from app import app, AIModel
    app.app_context().push()
    models = AIModel.query.all()
    print(f'‚úÖ {len(models)} modelos encontrados no banco')
    enabled_models = [m for m in models if m.is_enabled]
    print(f'‚úÖ {len(enabled_models)} modelos habilitados')
except Exception as e:
    print(f'‚ö†Ô∏è  Erro ao verificar modelos: {e}')
"
        else
            echo "‚ùå ERRO: Problemas de integridade detectados no banco!"
            echo "üîÑ Restaurando backup..."
            cp "$BACKUP_FILE" "instance/diria.db"
            echo "‚úÖ Backup restaurado. Verifique os logs e tente novamente."
            exit 1
        fi
    else
        echo "‚ùå ERRO: Falha na migra√ß√£o do banco de dados!"
        echo "üîÑ Restaurando backup..."
        cp "$BACKUP_FILE" "instance/diria.db"
        echo "‚úÖ Backup restaurado. Verifique os logs e tente novamente."
        exit 1
    fi
fi

# Configurar permiss√µes (opcional)
echo "üîê Configurando permiss√µes..."
chmod +x start.sh 2>/dev/null || true

# Reiniciar a aplica√ß√£o usando supervisorctl
echo "üîÑ Reiniciando aplica√ß√£o..."

# Tentar diferentes m√©todos para reiniciar a aplica√ß√£o
RESTART_SUCCESS=false

# M√©todo 1: Tentar supervisorctl sem sudo
if command -v supervisorctl >/dev/null 2>&1; then
    echo "üîÑ Tentando reiniciar via supervisorctl..."
    if supervisorctl restart diria 2>/dev/null; then
        echo "‚úÖ Aplica√ß√£o reiniciada via supervisorctl"
        RESTART_SUCCESS=true
    else
        echo "‚ö†Ô∏è  supervisorctl sem sudo falhou"
    fi
fi

# M√©todo 2: Tentar com sudo se o primeiro falhou
if [ "$RESTART_SUCCESS" = false ] && command -v sudo >/dev/null 2>&1; then
    echo "üîÑ Tentando reiniciar via sudo supervisorctl..."
    if sudo supervisorctl restart diria 2>/dev/null; then
        echo "‚úÖ Aplica√ß√£o reiniciada via sudo supervisorctl"
        RESTART_SUCCESS=true
    else
        echo "‚ö†Ô∏è  sudo supervisorctl falhou"
    fi
fi

# M√©todo 3: Tentar parar e iniciar manualmente
if [ "$RESTART_SUCCESS" = false ]; then
    echo "üîÑ Tentando reiniciar manualmente..."
    
    # Parar processo se estiver rodando
    pkill -f "gunicorn.*diria" 2>/dev/null || true
    sleep 2
    
    # Iniciar novamente
    if [ -f "venv/bin/gunicorn" ]; then
        nohup venv/bin/gunicorn -c gunicorn.conf.py app:app > logs/gunicorn.log 2>&1 &
        echo "‚úÖ Aplica√ß√£o reiniciada manualmente"
        RESTART_SUCCESS=true
    else
        echo "‚ùå Gunicorn n√£o encontrado no ambiente virtual"
    fi
fi

if [ "$RESTART_SUCCESS" = false ]; then
    echo "‚ùå N√£o foi poss√≠vel reiniciar a aplica√ß√£o automaticamente"
    echo "üí° Execute manualmente: sudo supervisorctl restart diria"
fi

# Verificar status da aplica√ß√£o
echo "üìä Verificando status da aplica√ß√£o..."
sleep 5

# Tentar verificar status
if command -v supervisorctl >/dev/null 2>&1; then
    if supervisorctl status diria 2>/dev/null; then
        echo "‚úÖ Status verificado via supervisorctl"
    elif sudo supervisorctl status diria 2>/dev/null; then
        echo "‚úÖ Status verificado via sudo supervisorctl"
    else
        echo "‚ö†Ô∏è  N√£o foi poss√≠vel verificar status via supervisorctl"
    fi
else
    echo "‚ÑπÔ∏è  supervisorctl n√£o encontrado"
fi

# Verificar se a aplica√ß√£o est√° funcionando
echo "üß™ Testando aplica√ß√£o..."
sleep 3

if curl -s -o /dev/null -w "%{http_code}" http://localhost:8000 2>/dev/null | grep -q "302\|200"; then
    echo "‚úÖ Aplica√ß√£o respondendo corretamente!"
else
    echo "‚ö†Ô∏è  Aplica√ß√£o pode n√£o estar respondendo - verifique os logs"
    echo "üí° Logs dispon√≠veis em: logs/error.log e logs/access.log"
fi

echo ""
echo "üéâ Deploy autom√°tico conclu√≠do com sucesso!"
echo "üåê Aplica√ß√£o dispon√≠vel em: https://diria.com.br"
echo ""

echo "üîë IMPORTANTE: Configure as chaves de API via painel administrativo!"
echo "   Acesse: https://diria.com.br/admin/api_keys"
echo "   Ou use o arquivo .env como fallback"
echo ""
echo "ü§ñ NOVO: Sistema de modelos din√¢micos ativo!"
echo "   - Modelos agora s√£o gerenciados via banco de dados"
echo "   - Acesse: https://diria.com.br/admin/config"
echo "   - Habilite/desabilite modelos conforme necess√°rio"
echo ""
echo "üìã Pr√≥ximos passos:"
echo "   1. Acesse o painel admin: https://diria.com.br/admin"
echo "   2. V√° em 'Gerenciar Chaves de API'"
echo "   3. Configure as chaves de OpenAI, Anthropic e Google"
echo "   4. V√° em 'Configura√ß√µes' para gerenciar modelos de IA"
echo "   5. Teste a gera√ß√£o de minutas" 